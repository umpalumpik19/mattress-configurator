// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ –≤ Supabase
const fs = require('fs');
const path = require('path');
const { createClient } = require('@supabase/supabase-js');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã SUPABASE_URL –∏–ª–∏ SUPABASE_ANON_KEY –≤ .env —Ñ–∞–π–ª–µ');
  console.log('–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–º–ø–æ—Ä—Ç—É –¥–∞–Ω–Ω—ã—Ö –≤ Supabase...');

// –ß—Ç–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–æ–≤
const layersConfig = JSON.parse(
  fs.readFileSync(path.join(__dirname, 'public/data/layers-config.json'), 'utf8')
);

console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${layersConfig.mattressLayers.length} —Ç–∏–ø–æ–≤ —Å–ª–æ–µ–≤`);
console.log(`üßµ –ù–∞–π–¥–µ–Ω–æ ${layersConfig.covers.length} —Ç–∏–ø–æ–≤ —á–µ—Ö–ª–æ–≤`);

// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–±–ª–∏—Ü
function prepareLayers() {
  const layersForDB = [];
  
  layersConfig.mattressLayers.forEach(layer => {
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
    Object.entries(layer.prices).forEach(([size, price]) => {
      layersForDB.push({
        layer_id: layer.id,
        layer_name: layer.name,
        size: size,
        price: price,
        available_heights: layer.availableHeights,
        icon_path: layer.icon,
        slug: layer.slug
      });
    });
  });
  
  return layersForDB;
}

function prepareCovers() {
  return layersConfig.covers.map(cover => ({
    cover_id: cover.id,
    cover_name: cover.name,
    price: cover.price,
    slug: cover.slug,
    icon_path: cover.icon
  }));
}

const layersData = prepareLayers();
const coversData = prepareCovers();

console.log(`‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${layersData.length} –∑–∞–ø–∏—Å–µ–π —Å–ª–æ–µ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞`);
console.log(`‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${coversData.length} –∑–∞–ø–∏—Å–µ–π —á–µ—Ö–ª–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞`);

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
module.exports = {
  layersData,
  coversData
};

// –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
async function importData() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ò–º–ø–æ—Ä—Ç —á–µ—Ö–ª–æ–≤
    console.log('üì§ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ö–ª—ã...');
    const { data: coversResult, error: coversError } = await supabase
      .from('mattress_covers')
      .insert(coversData);
    
    if (coversError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —á–µ—Ö–ª–æ–≤:', coversError);
      return;
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${coversData.length} —á–µ—Ö–ª–æ–≤`);
    
    // –ò–º–ø–æ—Ä—Ç —Å–ª–æ–µ–≤ (–ø–æ —á–∞—Å—Ç—è–º, —Ç–∞–∫ –∫–∞–∫ –∏—Ö –º–Ω–æ–≥–æ)
    console.log('üì§ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–∏ –º–∞—Ç—Ä–∞—Å–æ–≤...');
    const batchSize = 50; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ 50 –∑–∞–ø–∏—Å–µ–π –∑–∞ —Ä–∞–∑
    
    for (let i = 0; i < layersData.length; i += batchSize) {
      const batch = layersData.slice(i, i + batchSize);
      console.log(`   –ò–º–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π ${i + 1}-${Math.min(i + batchSize, layersData.length)}...`);
      
      const { data: layersResult, error: layersError } = await supabase
        .from('mattress_layers')
        .insert(batch);
      
      if (layersError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å–ª–æ–µ–≤:', layersError);
        return;
      }
    }
    
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${layersData.length} –∑–∞–ø–∏—Å–µ–π —Å–ª–æ–µ–≤`);
    console.log('üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
  }
}

// –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–º–ø–æ—Ä—Ç
if (require.main === module) {
  importData();
}